As, you know I decided to do something that was very interesting to me. I was brushing up on python, and trying to implement key topics from the class. Included in the following CSFINALPRITCHETTJ folder are all of the projects that it took for me to get to pong. All of the python apps listed inside of this directory are a mix of python and kivy-language(a quick script language used to implement widgets effectively). Inside of each python folder you will see a few things, main.py, buildozer.spec, and a bin folder. 

***Brief Description of Each *****************************************************************************************************************************************
main.py- to execute this code use this line of command python main.py, this will use the stand alone application generated by kivy for you to run our apps. Also, any other .py classes 
buildozer.spec - this is the spec that is created for andriod apk files to upload onto android phones (below is listed the steps to create your python app into an android app).
bin- inside of the bin is the apk that was generated when you ran the lines listed below to generate the python app for android.
*Disclaimer: I would've had IOS completed, but you weren't here to test the xcode, however I listed ways for you to make this possible.
***********************************************************************************************************************************************************************

Overview of PritchettJ Final Project:
 I comprised many of the various app's I made during this learning experience to what we learned in our class. It goes from basic typing in text and being able to resize and move it, to animation. I think that it incoporates not just one, but many of the requirements for the final grade. In terms of  platformability, like others kivy w/ python can be IOS or Android. Below I presented you with a nice url to get you started on kivy, and maybe start your kivy project. I just wanted to give you options for next semester/year so you're not forced to do just android or objective-c/swift. Python is also a very hot language right now and all of the apps are feasible. I would suggest going the kivy documentation to look at all the amazing libraries it has to offer. If you have any questions let me know! I think you got this just change to the folder in the cmd line to the app dir name and then run python main.py and it should work! Have a great break Matt! Even with frustrations I appreciate what the class had to offer.


Things needed for kivy
http://kivy.org/docs/installation/installation-macosx.html

How to make android APK's
sudo pip install buildozer

Create folder for kivy-app
rename main file with if __name__ == "__main__": to main.py

Run sudo buildozer init in the directory with main.py

Open buildozer.spec with VI or any text editor of choice
Look at my examples with comments of whats important inside this file

Then run buildozer android debug
This will build an APK

FOR iOS
Compile the distribution¶

Open a terminal, and type:

$ git clone git://github.com/kivy/kivy-ios
$ cd kivy-ios
$ tools/build-all.sh
If you don’t want to compile all the things needed for kivy, edit and change tools/build-all.sh to your needs.

Most of the python distribution will be packed into a python27.zip. If you experience any issues or would like more detail on this process, please refer to Compiling for IOS.

Create an Xcode project¶

Before proceeding to the next step, ensure your application entry point is a file named main.py.

We provide a script that creates an initial Xcode project to start with. In the command line below, replace test with your project name. It must be a name without any spaces or illegal characters:

$ tools/create-xcode-project.sh test /path/to/your/appdir
Note
You must use a fully qualified path to your application directory.
Now you can open the Xcode project:

$ open app-test/test.xcodeproj

